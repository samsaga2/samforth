/*

  SamForth Z80
  (c) 2009 Victor Marzo <samsaga2@gmail.com>
	
	
  Based on CamelForth for the Zilog Z80
  (c) 1994 Bradford J. Rodriguez
  Permission is granted to freely copy, modify,
  and distribute this program for personal or
  educational use.  Commercial inquiries should
  be directed to the author at 221 King St. E.,
  #32, Hamilton, Ontario L8N 1B5 Canada


  Direct-Threaded
    BC=TOS
    HL=W
    DE=IP
    SP=PSP
    IX=RSP
	
*/
	
CHPUT	equ 00a2h

RAMBASE	equ 0e000h
PSP	equ RAMBASE
RSP	equ PSP+200h
TEMP    equ PSP+400h

	;; *** ROM HEADER ***
	org 04000h
	db 041h,042h
	dw INIT
	ds 12

	;; *** FORTH KERNEL ***
	macro NEXT
	ex de,hl
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ex de,hl
	jp (hl)
	endm

	macro NEXTHL
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ex de,hl
	jp (hl)
	endm
	
DOCOLON:
	dec ix			; push IP into RSP
	ld (ix+0),d
	dec ix
	ld (ix+0),e
	pop hl
	NEXTHL
	
LIT:
	push bc			; push TOS into PSP
	ld a,(de)		; fetch cell at IP to TOS
	ld c,a
	inc de
	ld a,(de)
	ld b,a
	inc de
	NEXT

EXIT:	ld e,(ix+0)		; pop IP from RSP
	inc ix
	ld d,(ix+0)
	inc ix
	NEXT

	;; *** INIT ***
INIT:
	ld sp,PSP		; setup param stack
	ld ix,RSP		; setup return stack
	ld de,MAIN+3		; setup IP pointer to CFA MAIN
	NEXT
	
	;; STACK OPERATIONS ===========================

	;; DUP		x -- x x
DUP:	push bc
	NEXT

	;; ?DUP		x -- 0 | x x
QDUP:	ld a,b
	or c
	jr nz,DUP
	NEXT
	
	;; DROP		x --
DROP:	pop bc
	NEXT

	;; SWAP		x y -- y x
SWAP:	pop hl
	push bc
	ld b,h
	ld c,l
	NEXT

	;; OVER		x y -- x y x
OVER:	pop hl
	push hl
	push bc
	ld b,h
	ld c,l
	NEXT

	;; ROT		x y z -- y z x
ROT:	pop hl			; y
	ex (sp),hl		; y on stack, x in hl
	push bc
	ld b,h
	ld c,l
	NEXT

	;; >R		x --	R: -- x
TOR:	dec ix			; push TOS into RST
	ld (ix+0),b
	dec ix
	ld (ix+0),c
	pop bc			; pop new TOS
	NEXT

	;; R>		-- x	R: x --
RFROM:
	push bc			; push TOS
	ld c,(ix+0)		; pop RST to TOS
	inc ix
	ld b,(ix+)
	inc ix
	NEXT

	;; R@		-- x	R: x -- x
RFETCH:
	push bc			; push TOS
	ld c,(ix+0)		; fetch RST to TOS
	ld b,(ix+1)
	NEXT

	;; MEMORY OPERATIONS ===========================

	;; !		x a-addr --
STORE:
	ld h,b			; address in hl
	ld l,c
	pop bc			; data in bc
	ld (hl),c
	inc hl
	ld (hl),b
	pop bc			; pop TOS
	NEXT

	;; C!		char c-addr --
CSTORE:
	ld h,b			; address in hl
	ld l,c
	pop bc			; data in bc
	ld (hl),c
	pop bc			; pop TOS
	NEXT

	;; @		a-addr -- x
FETCH:
        ld h,b			; address in hl
	ld l,c
	ld c,(hl)
	inc hl
	ld b,(hl)
	NEXT

	;; C@		c-addr -- char
CFETCH:
        ld a,(bc)
	ld c,a
	ld b,0
	NEXT

	;; PC!		char c-addr --
PCSTORE:
	pop hl 			; char in L
	out (c),l		; to port (BC)
	pop bc			; pop TOS
	NEXT

	;; PC@		c-addr -- char
PCFETCH:	
	in c,(c)		; read port (BC) to C
	ld b,0
	NEXT

	;; ARITHMETIC AND LOGICAL OPERATIONS =========

	;; +		n1/u1 n2/u2 -- n3/u3
PLUS:	pop hl
	add hl,bc
	ld b,h
	ld c,l
	NEXT

	;; -		n1/u1 n2/u2 -- n3/u3
MINUS:
	pop hl
	or a
	sbc hl,bc
	ld b,h
	ld c,l
	NEXT

	;; AND		x y -- x
AND:	pop hl
	ld a,b
	and h
	ld b,a
	ld a,c
	and l
	ld c,a
	NEXT

	;; OR		x y -- x
OR:	pop hl
	ld a,b
	or h
	ld b,a
	ld a,c
	or l
	ld c,a
	NEXT

	;; XOR		x y -- x
XOR:	pop hl
	ld a,b
	xor h
	ld b,a
	ld a,c
	xor l
	ld c,a
	NEXT

	;; INVERT	x -- y
INVERT:	ld a,b
	cpl
	ld b,a
	ld a,c
	cpl
	ld c,a
	NEXT

	;; NEGATE	x -- y
NEGATE:	ld a,b
	cpl
	ld b,a
	ld a,c
	cpl
	ld c,a
	inc bc
	NEXT

	;; 1+		n1/u1 -- n2/u2
ONEPLUS:
	inc bc
	NEXT

	;; 1-		n1/u1 -- n2/u2
ONEMINUS:	
	dec bc
	NEXT

	;; 2*		x -- y
TWOSTAR:
	sla c
	rl b
	NEXT

	;; 2/		x -- y
TWOSLASH:
	sra b
	rr c
	NEXT

	;; LSHIFT	x u -- y
LSHIFT:	ld b,c			; b=loop counter
	pop hl
	inc b			; test for counter=0
	jr .lsh2
.lsh1:	add hl,hl		; left shift HL, n times
.lsh2:	djnz .lsh1
	ld b,h			; result
	ld c,l
	NEXT

	;; RSHIFT	x u -- y
RSHIFT:	ld b,c			; b=loop counter
	pop hl
	inc b			; test for counter=0
	jr .rsh2
.rsh1:	srl h			; right shift HL, n times
	rr l
.rsh2:	djnz .rsh1
	ld b,h			; result
	ld c,l
	NEXT

	;; +!		n/u a-addr --
PLUSSTORE:
	pop hl
	ld a,(bc)		; low byte
	add a,l
	ld (bc),a
	inc bc
	ld a,(bc)		; high byte
	adc a,h
	ld (bc),a
	pop bc			; pop TOS
	NEXT

	;; LOOP AND BRANCH OPERATIONS ================

	;; BRANCH	--
BRANCH: ld a,(de)     		;  get inline value => IP
        ld l,a
        inc de
        ld a,(de)
        ld h,a
        NEXTHL

	;; ?BRANCH	x --
QBRANCH:	
        ld a,b
        or c            	; test old TOS
        pop bc          	; pop new TOS
        jr z,BRANCH		; if old TOS=0, branch
        inc de          	; else skip inline value
        inc de
        NEXT

	;; (do)		n1|u1 n2|u2 --	R: -- sys1 sys2
XDO:	ex de,hl
        ex (sp),hl   		; IP on stack, limit in HL
        ex de,hl
        ld hl,8000h
        or a
        sbc hl,de    		; 8000-limit in HL
        dec ix       		; push this fudge factor
        ld (ix+0),h  		;    onto return stack
        dec ix       		;    for later use by 'I'
        ld (ix+0),l
        add hl,bc    		; add fudge to start value
        dec ix       		; push adjusted start value
        ld (ix+0),h  		;    onto return stack
        dec ix       		;    as the loop index.
        ld (ix+0),l
        pop de       		; restore the saved IP
        pop bc       		; pop new TOS
        NEXT

	;; (loop)	R: sys1 sys2 -- | sys1 sys2
XLOOP:	exx
        ld bc,1
looptst:
	ld l,(ix+0)  		; get the loop index
        ld h,(ix+1)
        or a
        adc hl,bc    		; increment w/overflow test
        jp pe,loopterm  	; overflow=loop done
        ld (ix+0),l  		; save the updated index
        ld (ix+1),h
        exx
        jr BRANCH		; take the inline branch
loopterm: 			; terminate the loop
        ld bc,4      		; discard the loop info
        add ix,bc
        exx
        inc de       		; skip the inline branch
        inc de
        NEXT

	;; (+loop)	n --	R: sys1 sys2 -- | sys1 sys2
XPLUSLOOP:	
        pop hl      		; this will be the new TOS
        push bc
        ld b,h
        ld c,l
        exx
        pop bc      		; old TOS = loop increment
        jr looptst

	;; I		-- n R: sys1 sys2 -- sys1 sys2
I:	push bc     		; push old TOS
        ld l,(ix+0) 		; get current loop index
        ld h,(ix+1)
        ld c,(ix+2) 		; get fudge factor
        ld b,(ix+3)
        or a
        sbc hl,bc   		; subtract fudge factor,
        ld b,h      		;   returning true index
        ld c,l
        NEXT

	;; J		-- n	R: 4*sys -- 4*sys
J:	push bc     		; push old TOS
        ld l,(ix+4) 		; get current loop index
        ld h,(ix+5)
        ld c,(ix+6) 		; get fudge factor
        ld b,(ix+7)
        or a
        sbc hl,bc   		; subtract fudge factor,
        ld b,h      		;   returning true index
        ld c,l
        NEXT

	;; UNLOOP	--	R: sys1 sys2 --
UNLOOP:	inc ix
        inc ix
        inc ix
        inc ix
        NEXT
	
	;; MISC OPERATIONS ===========================

	;; SYSCALL	a bc de hl address -- a bc de hl
REG_DE EQU TEMP+0
REG_IX EQU TEMP+2
PARAM_ADDR EQU TEMP+4
PARAM_A EQU TEMP+6
PARAM_BC EQU TEMP+8
PARAM_DE EQU TEMP+10
PARAM_HL EQU TEMP+12

SYSCALL:
        ; save bc
        ld (PARAM_ADDR),bc
        ; save ix
        push ix
        pop bc
        ld (REG_IX),bc
        ; save de
        push de
        pop bc
        ld (REG_DE),bc
        ; save param hl
        pop bc
        ld (PARAM_HL),bc
        ; save param de
        pop bc
        ld (PARAM_DE),bc
        ; save param BC
        pop bc
        ld (PARAM_BC),bc
        ; save param a
        pop bc
        ld (PARAM_A),bc
        ; prepare call
        ld bc,.return
        push bc
        ld bc,(PARAM_ADDR)
        push bc
        ; get param hl
        ld bc,(PARAM_HL)
        ld l,c
        ld h,b
        ; get param de
        ld bc,(PARAM_DE)
        ld e,c
        ld d,b
        ; get param bc
        ld bc,(PARAM_BC)
        ; get param a
        ld a,(PARAM_A)
        ret
.return:
        ; store out bc
        ld (PARAM_BC),bc
        ; store out de
        push de
        pop bc
        ld (PARAM_DE),bc
        ; store out hl
        push hl
        pop hl
        ld (PARAM_HL),hl
        ; store out a
        ld (PARAM_A),a

        ; restore ix
        ld bc,(REG_IX)
        push bc
        pop ix
        ; restore de
        ld bc,(REG_DE)
        push bc
        pop de
        ; push regs
        ld bc,(PARAM_A)
        ld b,0
        push bc
        ld bc,(PARAM_BC)
        push bc
        ld bc,(PARAM_DE)
        push bc
        ld bc,(PARAM_HL)
        NEXT
