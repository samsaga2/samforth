/*

  SamForth Z80
  (c) 2009 Victor Marzo <samsaga2@gmail.com>
	
	
  Based on CamelForth for the Zilog Z80
  (c) 1994 Bradford J. Rodriguez
  Permission is granted to freely copy, modify,
  and distribute this program for personal or
  educational use.  Commercial inquiries should
  be directed to the author at 221 King St. E.,
  #32, Hamilton, Ontario L8N 1B5 Canada


  Direct-Threaded
    BC=TOS
    HL=W
    DE=IP
    SP=PSP
    IX=RSP
	
*/

RAMBASE	equ 0e000h
PSP	equ RAMBASE
RSP	equ PSP+200h
TEMP    equ PSP+400h

	;; *** ROM HEADER ***
	org 04000h
	db 041h,042h
	dw INIT
	ds 12

	;; *** FORTH KERNEL ***
	macro NEXT
	ex de,hl
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ex de,hl
	jp (hl)
	endm

	macro NEXTHL
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ex de,hl
	jp (hl)
	endm
	
DOCOLON:
	dec ix			; push IP into RSP
	ld (ix+0),d
	dec ix
	ld (ix+0),e
	pop hl
	NEXTHL
	
LIT:
	push bc			; push TOS into PSP
	ld a,(de)		; fetch cell at IP to TOS
	ld c,a
	inc de
	ld a,(de)
	ld b,a
	inc de
	NEXT

EXIT:	ld e,(ix+0)		; pop IP from RSP
	inc ix
	ld d,(ix+0)
	inc ix
	NEXT

	;; *** INIT ***
INIT:
	ld sp,PSP		; setup param stack
	ld ix,RSP		; setup return stack
	ld de,MAIN+3		; setup IP pointer to CFA MAIN
	NEXT

	;; LOOP AND BRANCH OPERATIONS ================

	;; SYSCALL	a bc de hl address -- a bc de hl
REG_DE EQU TEMP+0
REG_IX EQU TEMP+2
PARAM_ADDR EQU TEMP+4
PARAM_A EQU TEMP+6
PARAM_BC EQU TEMP+8
PARAM_DE EQU TEMP+10
PARAM_HL EQU TEMP+12

SYSCALL:
        ; save bc
        ld (PARAM_ADDR),bc
        ; save ix
        push ix
        pop bc
        ld (REG_IX),bc
        ; save de
        push de
        pop bc
        ld (REG_DE),bc
        ; save param hl
        pop bc
        ld (PARAM_HL),bc
        ; save param de
        pop bc
        ld (PARAM_DE),bc
        ; save param BC
        pop bc
        ld (PARAM_BC),bc
        ; save param a
        pop bc
        ld (PARAM_A),bc
        ; prepare call
        ld bc,.return
        push bc
        ld bc,(PARAM_ADDR)
        push bc
        ; get param hl
        ld bc,(PARAM_HL)
        ld l,c
        ld h,b
        ; get param de
        ld bc,(PARAM_DE)
        ld e,c
        ld d,b
        ; get param bc
        ld bc,(PARAM_BC)
        ; get param a
        ld a,(PARAM_A)
        ret
.return:
        ; store out bc
        ld (PARAM_BC),bc
        ; store out de
        push de
        pop bc
        ld (PARAM_DE),bc
        ; store out hl
        push hl
        pop hl
        ld (PARAM_HL),hl
        ; store out a
        ld (PARAM_A),a

        ; restore ix
        ld bc,(REG_IX)
        push bc
        pop ix
        ; restore de
        ld bc,(REG_DE)
        push bc
        pop de
        ; push regs
        ld bc,(PARAM_A)
        ld b,0
        push bc
        ld bc,(PARAM_BC)
        push bc
        ld bc,(PARAM_DE)
        push bc
        ld bc,(PARAM_HL)
        NEXT
